#!/bin/bash

# This script will runas the ubuntu user and yet needs sudo permissions on the /etc/cntlmc.conf file
# Due to the insane perl and sed calls needed to do regex substitutions in the files, is easier to inject these calls
# into a file and then sudo execute that rather than try and get the formatting right to run sudo on the calls directly
#
# 1. Push these commnds into a temp file
# 2. Make the file executable
# 3. Run the file with sudo privileges
# 4. Remove the file

temp_file=$(mktemp)
cat > $temp_file << 'EOL'
#!/bin/bash
echo "Setting up password for CNTLM authentication proxy"
echo
echo "Please enter your NTADMIN username (e.g. testuser1), followed by [ENTER]:"
read username
echo
echo "Please enter your password, followed by [ENTER]:"
read -s password
echo "Generating the configuration for CNTLM and injecting it into /etc/cntlm.conf"
temp_file=$(mktemp)
domain=$(cat /etc/cntlm.conf | grep Domain | awk '{print $2}')
password_hash=$(echo ${password} | cntlm -H -c ${temp_file} -d ${domain} -u ${username} | tail -n 3)

sed -i "s/^Username\(\s\+\).*$/Username\1${username}/g" /etc/cntlm.conf
perl -0777 -i.orig -pe 's/(# ---START PASSWORD BLOCK\n)[a-z|A-Z|\s|\d|\#|'\''|\,|\-|_]+\n(# ---END PASSWORD BLOCK\n)/$1'"${password_hash}"'\n$2/igs' /etc/cntlm.conf
rm $temp_file

systemctl enable cntlm || true
systemctl restart cntlm

egrep "****INJECTED PROXY VARIABLES****" /etc/environment
if [ $? -ne 0 ]
then
    echo "Injecting proxy into the global environment"
    echo "****INJECTED PROXY VARIABLES****" >> /etc/environment
    echo "http_proxy=\"http://0.0.0.0:3128\"" >> /etc/environment
    echo "HTTP_PROXY=\"http://0.0.0.0:3128\"" >> /etc/environment
    echo "https_proxy=\"http://0.0.0.0:3128\"" >> /etc/environment
    echo "HTTPS_PROXY=\"http://0.0.0.0:3128\"" >> /etc/environment
    echo "ftp_proxy=\"http://0.0.0.0:3128\"" >> /etc/environment
    echo "FTP_PROXY=\"http://0.0.0.0:3128\"" >> /etc/environment
fi

docker_proxy_file=/etc/systemd/system/docker.service.d/http-proxy.conf
mkdir -p $(dirname ${docker_proxy_file})

rm -f ${docker_proxy_file}
touch ${docker_proxy_file}

cat > ${docker_proxy_file} << 'EOF'
[Service]
Environment="HTTP_PROXY=0.0.0.0:3128"
Environment="HTTPS_PROXY=0.0.0.0:3128"
Environment="FTP_PROXY=0.0.0.0:3128"
EOF

systemctl daemon-reload
systemctl restart docker
EOL
chmod a+x $temp_file
sudo sh -c "$temp_file"
rm $temp_file